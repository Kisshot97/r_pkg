library(Rmisc)
library(ggplot2)
library(grid)
library("cowplot")
library(gridExtra)
for (k in 1:6) {
t=1
for (ddad in c(1:6)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
for (ddad in c(7:12)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
}
ranking=numeric()
data2=numeric()
pic1=pic2=pic3=list()
for (j in 1:12) {
ran=midd=mf=numeric()
for (i in c(1:6)) {
dat=get(paste0(i,"s",j))
mdat=melt(dat)
mdat=cbind(mdat,i)
mf=rbind(mf,mdat)
}
mf1=mf[c(1:1800),]
ymax=quantile(na.omit(mf1[,2]),c(0.025,0.975))
colnames(mf1)=c("method","MSE","p")
gpl1=ggplot(mf1)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=200)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
mf2=mf[c(1801:3600),]
ymax=quantile(na.omit(mf2[,2]),c(0.025,0.975))
colnames(mf2)=c("method","MSE","p")
gpl2=ggplot(mf2)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=500)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
pic1[[j]]=gpl1
pic2[[j]]=gpl2
}
# Create a DataFrame
data <- data.frame(
Xdata = rnorm(6), Ydata = rnorm(6),
LegendData =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
data$LegendData= factor(data$LegendData, levels =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
# Create a Scatter Plot
gplot <- ggplot(data, aes(Xdata, Ydata, color = LegendData)) +geom_line(size = c(1,1,1,1,1,1))+ theme(legend.position="bottom")+scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
# Draw Only Legend without plot
# Grab legend from gplot
legend <- get_legend(gplot)
#write.csv(ranking,"E:/R_Seminor/5.10/ran_train.csv")
#write.csv(data2,"E:/R_Seminor/5.10/data2_train.csv")
for (i in 1:6) {
grid.newpage()
ac=grid.arrange(pic1[[i]],pic2[[i]],pic1[[i+6]],pic2[[i+6]],legend,layout_matrix = rbind(c(1,2),c(1,2),c(3,4),c(3,4),c(5,5)))
ggsave(ac,filename =paste0("D:/share/6pc_sim/simulation plot/med700",i,".png"),width = 15,height = 9)
}
# Create a Scatter Plot
gplot <- ggplot(data, aes(Xdata, Ydata, color = LegendData)) +geom_boxplot(size = c(1,1,1,1,1,1))+ theme(legend.position="bottom")+scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
library(reshape2)
library(Rmisc)
library(ggplot2)
library(grid)
library("cowplot")
library(gridExtra)
for (k in 1:6) {
t=1
for (ddad in c(1:6)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
for (ddad in c(7:12)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
}
ranking=numeric()
data2=numeric()
pic1=pic2=pic3=list()
for (j in 1:12) {
ran=midd=mf=numeric()
for (i in c(1:6)) {
dat=get(paste0(i,"s",j))
mdat=melt(dat)
mdat=cbind(mdat,i)
mf=rbind(mf,mdat)
}
mf1=mf[c(1:1800),]
ymax=quantile(na.omit(mf1[,2]),c(0.025,0.975))
colnames(mf1)=c("method","MSE","p")
gpl1=ggplot(mf1)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=200)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
mf2=mf[c(1801:3600),]
ymax=quantile(na.omit(mf2[,2]),c(0.025,0.975))
colnames(mf2)=c("method","MSE","p")
gpl2=ggplot(mf2)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=500)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
pic1[[j]]=gpl1
pic2[[j]]=gpl2
}
# Create a DataFrame
data <- data.frame(
Xdata = rnorm(6), Ydata = rnorm(6),
LegendData =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
data$LegendData= factor(data$LegendData, levels =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
# Create a Scatter Plot
gplot <- ggplot(data, aes(Xdata, Ydata)) +geom_boxplot(size = c(1,1,1,1,1,1))+ theme(legend.position="bottom")+scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
#color = LegendData
# Draw Only Legend without plot
# Grab legend from gplot
legend <- get_legend(gplot)
#write.csv(ranking,"E:/R_Seminor/5.10/ran_train.csv")
#write.csv(data2,"E:/R_Seminor/5.10/data2_train.csv")
for (i in 1:6) {
grid.newpage()
ac=grid.arrange(pic1[[i]],pic2[[i]],pic1[[i+6]],pic2[[i+6]],legend,layout_matrix = rbind(c(1,2),c(1,2),c(3,4),c(3,4),c(5,5)))
ggsave(ac,filename =paste0("D:/share/6pc_sim/simulation plot/med700",i,".png"),width = 15,height = 9)
}
library(reshape2)
library(Rmisc)
library(ggplot2)
library(grid)
library("cowplot")
library(gridExtra)
for (k in 1:6) {
t=1
for (ddad in c(1:6)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
for (ddad in c(7:12)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
}
ranking=numeric()
data2=numeric()
pic1=pic2=pic3=list()
for (j in 1:12) {
ran=midd=mf=numeric()
for (i in c(1:6)) {
dat=get(paste0(i,"s",j))
mdat=melt(dat)
mdat=cbind(mdat,i)
mf=rbind(mf,mdat)
}
mf1=mf[c(1:1800),]
ymax=quantile(na.omit(mf1[,2]),c(0.025,0.975))
colnames(mf1)=c("method","MSE","p")
gpl1=ggplot(mf1)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=200)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
mf2=mf[c(1801:3600),]
ymax=quantile(na.omit(mf2[,2]),c(0.025,0.975))
colnames(mf2)=c("method","MSE","p")
gpl2=ggplot(mf2)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=500)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
pic1[[j]]=gpl1
pic2[[j]]=gpl2
}
# Create a DataFrame
data <- data.frame(
Xdata = rnorm(6), Ydata = rnorm(6),
LegendData =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
data$LegendData= factor(data$LegendData, levels =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
# Create a Scatter Plot
gplot <- ggplot(data, aes(Xdata, Ydata,fill = LegendData)) +geom_boxplot(size = c(1,1,1,1,1,1))+ theme(legend.position="bottom")+scale_fill_manual(values=c("#E69F00", "#56B4E9","blue","Red","green","yellow"))
#color = LegendData
# Draw Only Legend without plot
# Grab legend from gplot
legend <- get_legend(gplot)
#write.csv(ranking,"E:/R_Seminor/5.10/ran_train.csv")
#write.csv(data2,"E:/R_Seminor/5.10/data2_train.csv")
for (i in 1:6) {
grid.newpage()
ac=grid.arrange(pic1[[i]],pic2[[i]],pic1[[i+6]],pic2[[i+6]],legend,layout_matrix = rbind(c(1,2),c(1,2),c(3,4),c(3,4),c(5,5)))
ggsave(ac,filename =paste0("D:/share/6pc_sim/simulation plot/med700",i,".png"),width = 15,height = 9)
}
library(reshape2)
library(Rmisc)
library(ggplot2)
library(grid)
library("cowplot")
library(gridExtra)
for (k in 1:6) {
t=1
for (ddad in c(1:6)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
for (ddad in c(7:12)) {
cmd=read.csv(sprintf("D:/share/6pc_sim/pdat/cmdat_s%s_%s.csv",ddad,k))
bad=read.csv(sprintf("D:/share/6pc_sim/pdat/bartdat_s%s_%s.csv",ddad,k))
cfd=read.csv(sprintf("D:/share/6pc_sim/pdat/cfdat_s%s_%s.csv",ddad,k))
ptd=read.csv(sprintf("D:/share/6pc_sim/pdat/PTOdat_s%s_%s.csv",ddad,k))
pod=read.csv(sprintf("D:/share/6pc_sim/pdat/propdat_s%s_%s.csv",ddad,k))
pod0=read.csv(sprintf("D:/share/6pc_sim/pdat/prop0dat_s%s_%s.csv",ddad,k))
aa=data.frame(cmd,bad,cfd,ptd,pod,pod0)
colnames(aa)=c("cm","vt","cf","pto","porp","prop0")
assign(paste0(k,"s",t),aa)
t=t+1
}
}
ranking=numeric()
data2=numeric()
pic1=pic2=pic3=list()
for (j in 1:12) {
ran=midd=mf=numeric()
for (i in c(1:6)) {
dat=get(paste0(i,"s",j))
mdat=melt(dat)
mdat=cbind(mdat,i)
mf=rbind(mf,mdat)
}
mf1=mf[c(1:1800),]
ymax=quantile(na.omit(mf1[,2]),c(0.025,0.975))
colnames(mf1)=c("method","MSE","p")
gpl1=ggplot(mf1)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=200)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","greenyellow","coral","darkorchid4","darkorchid1"))
mf2=mf[c(1801:3600),]
ymax=quantile(na.omit(mf2[,2]),c(0.025,0.975))
colnames(mf2)=c("method","MSE","p")
gpl2=ggplot(mf2)+geom_boxplot(aes(x=factor(p),y=MSE,fill=method))+scale_y_continuous(trans='sqrt',limits = ymax)+
scale_x_discrete(labels = c("50","100","200"))+xlab("p")+ theme(legend.position="none")+ggtitle(sprintf("Simulation%s(n=500)",j))+
scale_fill_manual(values=c("#E69F00", "#56B4E9","greenyellow","coral","darkorchid4","darkorchid1"))
pic1[[j]]=gpl1
pic2[[j]]=gpl2
}
# Create a DataFrame
data <- data.frame(
Xdata = rnorm(6), Ydata = rnorm(6),
LegendData =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
data$LegendData= factor(data$LegendData, levels =c("bagging causal MARS","Virtual Twins","causal Forest","PTO Forest","proposed method","proposed method0"))
# Create a Scatter Plot
gplot <- ggplot(data, aes(Xdata, Ydata,fill = LegendData)) +geom_boxplot(size = c(1,1,1,1,1,1))+ theme(legend.position="bottom")+scale_fill_manual(values=c("#E69F00", "#56B4E9","greenyellow","coral","darkorchid4","darkorchid1"))
#color = LegendData
# Draw Only Legend without plot
# Grab legend from gplot
legend <- get_legend(gplot)
#write.csv(ranking,"E:/R_Seminor/5.10/ran_train.csv")
#write.csv(data2,"E:/R_Seminor/5.10/data2_train.csv")
for (i in 1:6) {
grid.newpage()
ac=grid.arrange(pic1[[i]],pic2[[i]],pic1[[i+6]],pic2[[i+6]],legend,layout_matrix = rbind(c(1,2),c(1,2),c(3,4),c(3,4),c(5,5)))
ggsave(ac,filename =paste0("D:/share/6pc_sim/simulation plot/med700",i,".png"),width = 15,height = 9)
}
library(parallel)
om=function(f){
#############################
pscore <- function(data,exp){
library(grf)
exper=c(rep('rct',6),rep('obv',6))
data.trans <- data
expt=exper[exp]
y <- data.trans[,1]
g <- data.trans[,2]
if(is.null(exp)){
return(data)
}
if(expt == "rct"){
pi <- rep(0.5,nrow(data))
}
if(expt == "obv"){
# Linearized probit regression PS:
m.out1 <- predict(regression_forest(data.trans[,c(-1,-2)],data.trans[,2],tune.parameters = "all"))
dis <- m.out1$predictions
dis[dis > 0.999] <- 0.999
dis[dis < 0.001] <- 0.001
pi <- dis
}
return(pi)
}
####################################
v=f[3]
nn=f[1]
pp=f[2]
ddad=f[4]
genen=1
#==========GEN==========#
source("D:/share/6pc_sim/dat_gen 2.0.r")
mx=c(3,8,7,5,1,5,3,8,7,5,1,5)
tx=c(1,2,3,4,5,9,1,2,3,4,5,9)
nx=c(200,500)
px=c(50,100,200,400)
typex=c(rep(1,6),rep(0,6))
if (genen==1) {
X=Xgen(n=nx[nn],p=px[pp])
fn=fnum(X)
mu0=fn[[mx[ddad]]]
tau0=fn[[tx[ddad]]]
datalist1=datagen(mu0,tau0,typex[ddad],X)
write.csv(datalist1,sprintf("D:/share/6pc_sim/700dat/train/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v),row.names = FALSE)
#=================================
#=======test=====================
X=Xgen(n=nx[nn],p=px[pp])
fn=fnum(X)
mu0=fn[[mx[ddad]]]
tau0=fn[[tx[ddad]]]
datalist2=datagen(mu0,tau0,typex[ddad],X)
write.csv(datalist2,sprintf("D:/share/6pc_sim/700dat/test/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v),row.names = FALSE)
}else{
datalist1=read.csv(sprintf("D:/share/6pc_sim/700dat/train/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
datalist2=read.csv(sprintf("D:/share/6pc_sim/700dat/test/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
}
#======================================
traindat=datalist1
testdat=datalist2
trainX=traindat[,c(-1,-2,-3,-ncol(traindat))]
trainY=traindat[,ncol(traindat)]
trainG=traindat[,2]
train=cbind(trainY,trainG,trainX)
testX= testdat[,c(-1,-2,-3,-ncol(traindat))]
testY= testdat[,ncol(traindat)]
testG= testdat[,2]
test=cbind( testY, testG, testX)
res.save <- data.frame(matrix(0,nrow(train),5))
colnames(res.save) <- c("true","bcm","cf","PTO","VT")
ps=pscore(train,ddad)
ps_test=pscore(test,ddad)
stra=stratify(ps,trainG,min.per.arm = 100)[[1]]
res.save$true<-testY
res.save.train <-res.save
#1.causal mars
if (ddad<7) {
fit_cm <- bagged.causalMARS(trainX,trainG,trainY)
}else{fit_cm <- bagged.causalMARS(trainX,trainG,trainY,propensity=TRUE,stratum = stra)}
pred_bcm <- predict(fit_cm, newx =testX)
pred_bcm_t <-predict(fit_cm, newx =trainX)
res.save.train$bcm <- pred_bcm_t
res.save$bcm <- pred_bcm
#2.PTO forest
fit_pto <- PTOforest(trainX,trainG, trainY,pscore = ps)
pred_pto <- predict(fit_pto,testX)
pred_pto_t <- predict(fit_pto,trainX)
res.save.train$PTO <- pred_pto_t
res.save$PTO <- pred_pto
#3.causal forest
c.forest<- causal_forest(trainX,trainY,trainG)
c.pred <- predict(c.forest, testX)$prediction
c.pred_t <- predict(c.forest, trainX)$prediction
res.save.train$cf <- c.pred_t
res.save$cf<-c.pred
#4.VT
teX1=trainX[traindat$t==1,]
teY1=trainY[traindat$t==1]
teX0=trainX[traindat$t==0,]
teY0=trainY[traindat$t==0]
f1=randomForest(teX1,teY1)
f0=randomForest(teX0,teY0)
Yf1=predict(f1,trainX)
Yf0=predict(f0,trainX)
hte=Yf1-Yf0
datvt=data.frame(trainX,hte)
mdlvt=rpart(hte~.,datvt)
output1=predict(mdlvt,newdata=testX)
res.save$VT <- output1
#===========================#
print(sprintf(paste(ddad,nx[nn],px[pp],v)))
write.csv(res.save,sprintf("D:/share/6pc_sim/700re/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
#write.csv(res.save.train,sprintf("D:/share/6pc_sim/700re/retrain/scenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
return(res.save)
}
cl <- makeCluster(15)
clusterEvalQ(cl, {
library(rpart)
library(grpreg)
library(ranger)
library(Rcpp)
library(causalLearning)
library(grf)
library(earth)
library(BART)
library(randomForest)
})
#==========================
res=list()
n=1
for (nn in 2) {
for (pp in 4) {
for (v in 101:150) {
for (ddad in c(1,2,3,6,7,8,9,12)) {
res[[n]]=c(nn,pp,v,ddad)
n=n+1}}
}}
rres=list()
t=n=1
for (qwe in seq(1,length(res),15)) {
for (i in 1:15) {
rres[[i]]=res[[n]]
n=n+1}
t=1
#============================
repeat {
t=t+1
rply=try(parSapply(cl,rres,om),silent = FALSE)
print(t)
if(class(rply)[1]!= "try-error") break
if (t>2) break
}
}
stopCluster(cl)
#source("D:/share/6pc_sim/fun_nonbag_auto.r")
library(parallel)
#source("Z:/3.14sim/tau-pi_v1.R")
#noi=rep(1,2)
d=list()
a=1
for (v in 101:150) {
for (nn in 2) {
for (pp in 4) {
for (ddad in c(1,2,3,6,7,8,9,12)) {
d[[a]]=c(v,nn,pp,ddad)
a=a+1
}
}
}
}
scbm=function(d){
source("D:/share/6pc_sim/fun_sinAGL.r")
nx=c(200,500)
px=c(50,100,200,400)
v=d[1]
nn=d[2]
pp=d[3]
ddad=d[4]
traindat=read.csv(sprintf("D:/share/6pc_sim/700dat/train/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
testdat=read.csv(sprintf("D:/share/6pc_sim/700dat/test/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
traindat=cbind(1,traindat)
testdat=cbind(1,testdat)
tau=testdat$tau
tau_train=traindat$tau
hte=marslasso(traindat,testdat,deg=c(1:3),maxn=50)
hte_test=hte[[1]]
hte_train=hte[[4]]
res=cbind(hte_test,hte_train,tau,tau_train)
write.csv(res,sprintf("D:/share/6pc_sim/myre_AGL2/Fscenario%s_n%s_p%s_%s.csv",ddad,nx[nn],px[pp],v))
}
cl=makeCluster(16)
res=parSapply(cl,d,scbm)
stopCluster(cl)
remotes::install_local("D:/r_pkg/moe.2023")
library(moe.2023)
momo(1)
library(moe.2023)
moe.2023::momo(1)
#devtools::check()
devtools::document()
setwd("D:/r_pkg/moe.2023")
#devtools::check()
devtools::document()
